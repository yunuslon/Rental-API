generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model customers {
  customerId  String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  firstName   String?   @db.VarChar(50)
  lastName    String?   @db.VarChar(50)
  gender      String?   @db.VarChar(10)
  dateOfBirth DateTime? @db.Date
  phoneNumber String?   @db.VarChar(15)
  email       String?   @db.VarChar(100)
  address     String?   @db.VarChar(255)
  createdAt   DateTime? @default(now()) @db.Timestamp(0)
  updatedAt   DateTime? @default(now()) @db.Timestamp(0)
  rentals     rentals[]
}

model employees {
  employeeId  String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  firstName   String?   @db.VarChar(50)
  lastName    String?   @db.VarChar(50)
  position    String?   @db.VarChar(50)
  hireDate    DateTime? @db.Date
  phoneNumber String?   @db.VarChar(15)
  email       String?   @db.VarChar(100)
  createdAt   DateTime? @default(now()) @db.Timestamp(0)
  updatedAt   DateTime? @default(now()) @db.Timestamp(0)
}

model maintenance {
  maintenanceId   String         @id @default(dbgenerated("(uuid())")) @db.Char(36)
  deviceId        String?        @db.Char(36)
  maintenanceDate DateTime?      @db.Date
  description     String?        @db.VarChar(255)
  cost            Decimal?       @db.Decimal(10, 2)
  createdAt       DateTime?      @default(now()) @db.Timestamp(0)
  updatedAt       DateTime?      @default(now()) @db.Timestamp(0)
  mobileDevices   mobileDevices? @relation(fields: [deviceId], references: [deviceId], onDelete: NoAction, onUpdate: NoAction, map: "maintenance_ibfk_1")

  @@index([deviceId], map: "deviceId")
}

model mobileDevices {
  deviceId          String        @id @default(dbgenerated("(uuid())")) @db.Char(36)
  deviceName        String?       @db.VarChar(50)
  brand             String?       @db.VarChar(50)
  model             String?       @db.VarChar(50)
  serialNumber      String?       @unique(map: "serialNumber") @db.VarChar(100)
  purchaseDate      DateTime?     @db.Date
  rentalPricePerDay Decimal?      @db.Decimal(10, 2)
  status            String?       @db.VarChar(20)
  createdAt         DateTime?     @default(now()) @db.Timestamp(0)
  updatedAt         DateTime?     @default(now()) @db.Timestamp(0)
  maintenance       maintenance[]
  rentals           rentals[]
}

model payments {
  paymentId     String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  rentalId      String?   @db.Char(36)
  paymentDate   DateTime? @db.Date
  amount        Decimal?  @db.Decimal(10, 2)
  paymentMethod String?   @db.VarChar(50)
  createdAt     DateTime? @default(now()) @db.Timestamp(0)
  updatedAt     DateTime? @default(now()) @db.Timestamp(0)
  rentals       rentals?  @relation(fields: [rentalId], references: [rentalId], onDelete: NoAction, onUpdate: NoAction, map: "payments_ibfk_1")

  @@index([rentalId], map: "rentalId")
}

model rentals {
  rentalId        String         @id @default(dbgenerated("(uuid())")) @db.Char(36)
  customerId      String?        @db.Char(36)
  deviceId        String?        @db.Char(36)
  rentalStartDate DateTime?      @db.Date
  rentalEndDate   DateTime?      @db.Date
  totalAmount     Decimal?       @db.Decimal(10, 2)
  createdAt       DateTime?      @default(now()) @db.Timestamp(0)
  updatedAt       DateTime?      @default(now()) @db.Timestamp(0)
  payments        payments[]
  customers       customers?     @relation(fields: [customerId], references: [customerId], onDelete: NoAction, onUpdate: NoAction, map: "rentals_ibfk_1")
  mobileDevices   mobileDevices? @relation(fields: [deviceId], references: [deviceId], onDelete: NoAction, onUpdate: NoAction, map: "rentals_ibfk_2")

  @@index([customerId], map: "customerId")
  @@index([deviceId], map: "deviceId")
}
